---
layout: homework
title: CSCI-UA.0480 - Homework #5
---

<div class="panel panel-default">
	<div class="panel-heading">Homework #5</div>
	<div class="panel-body" markdown="block">

# Let's Watch Some Movies! (Storing Data) - __Due March 29th__, by 11PM

## Overview

### Goals

* use the commandline mongodb client to create a database, collection and several documents
* use mongoose to read data from mongodb
* use mongoose to write data to mongodb

### Description

By the end of this project... you should be familiar with basic read and write operations with mongodb... and to see how mongodb integrates with an Express web application using Mongoose. See the [example interaction at the end of this page](#examples).

You'll have two pages:

* the first page is a list of movies: <code>/movies</code>
    * displays a table of movies
    * has a form to filter the movies by director name
* the second page allows the user to add movies: <code>/movies/add</code>




### Submission Process

You will be given access to a private repository on GitHub. 

* __Push__ your changes to the homework repository on GitHub.

### (3 points) Make at Least 4 Commits

* Commit multiple times throughout your development process.
* Make at least 3 separate commits - (for example, one option may be to make one commit per part in the homework).

## Part 1 - Setup

### Installing MongoDB and Preparing Data

* follow the [install instructions](http://docs.mongodb.org/manual/installation/) for your operating system
* or (recommended), use a package manager, like apt or homebrew (brew install mongodb)
* in order for you to connect to your database to work with data, your database server must be running
	* for some installations, mongodb will start when your computer starts
	* for other installations, you'll have to start it manually
	* you can test if your database is running by:
		* attempting to connect to the test database
		* in a terminal window, type in <code>mongo</code> (in any directory) to start the commandline client
		* you should be given a message with the version number of the Mongo shell
	* if it's not running, you have to start the database server manually:
		* in a terminal window, type in <code>mongod</code>; this starts the server
		* if it does not start because it's looking for a directory called <code>/data/db</code>
			* this means that <code>mongod</code> is looking for a place to store you data
			* this typically happens on OSX installations, sooo...
			* [check the docs](https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/#run-mongodb)... and then try:
			* create the directory: <code>sudo mkdir -p /data/db</code>
			* change the owner to your user (replace yourusername with your _actual_ username for you system): <code>sudo chown -R yourusername:staff /data/</code>
		* ensure that it is up and running by connecting to it using a commandline client... so in a different terminal tab/window, type in <code>mongo</code>:
* once you're connected with a commandline client (mongo), start inserting documents into a database called <code>hw05</code> and a collection called <code>movies</code>:
	* movies will have a title, year and director
	* so to insert, just do this in the commandline client: <code>db.movies.insert({title:'Los Abrazos Rotos', year:2009, director:'Pedro Almodovar'});</code>
	* (inserting will automatically create the database and collection for you if they don't already exist)
	* insert the following movies:

<pre><code data-trim contenteditable>Stroszek (1977) by Werner Herzog
Fitzcarraldo (1982) by Werner Herzog
Cave of Forgotten Dreams (2010) by Werner Herzog
Me and You and Everyone We Know (2005) by Miranda July
In the Mood for Love (2000) by Wong Kar-wai
Chungking Express (1994) by Wong Kar-wai
Enough Said (2013) by Nicole Holofcener
Walking and Talking (1996) by Nicole Holofcener
Los Abrazos Rotos (2009) by Pedro Almodovar
</code></pre>

* use <code>db.movies.find()</code> to show all of the movies that you've inserted
	* make sure there's _something_ there...
	* so that you know your web app actually has movies to read!
* use <code>ctrl + d</code> to exit the commandline client 
* (make sure you keep your database server running, though)

### (2 points) Directory Structure and Dependencies

Start your usual express project by:

* creating an app.js file
* installing the appropriate modules and saving them to package.json using <code>--save</code>
* creating the appropriate folders for your templates
* additionally, install __mongoose__: <code>npm install --save mongoose</code>

### (2 points) Connect to the Database

Create a file called <code>db.js</code> within the root of your project directory. <code>db.js</code> will contain:

* the code to connect to our database
* ...and our Schema and model (which we'll use to access data in our database)

In <code>db.js</code>, add the require for the <code>mongoose</code> module:

<pre><code data-trim contenteditable>var mongoose = require('mongoose') </code></pre>

Leave a placeholder for your schema...

<pre><code data-trim contenteditable>// my schema goes here!</code></pre>

And, finally, add the code that connects to the database. We'll connect to the local instance of MongoDB, and we'll use a database called <code>hw05</code> (this will be created for you once you start inserting documents... which you should have done already above!).

<pre><code data-trim contenteditable>mongoose.connect('mongodb://localhost/hw05');
</code></pre>

### (3 points) Schema 

For larger projects, there is usually one file per schema, all located in a separate folder called models. For now, however, define the following Schema within <code>db.js</code>. Check out the slides on:

* [the MongoDB Demo](../slides/11/mongo.html) 
* [and/or the Mongoose API](../slides/11/mongoose.html) 
* (or alternatively [check out the docs!](http://mongoosejs.com/docs/guide.html))


Since we're storing movies, we'd like each document to have:

* a title (a <code>String</code>)
* a director  (also a  <code>String</code>)
* a year (a <code>Number</code>)

Create a schema based on the above slides, and insert your code under your <code>// my schema goes here!</code> comment.

Then, use your schema to define your model... the model is used as a constructor to create new documents... or as an object with methods that allows the read or update of existing documents. 

You can place the following code after your schema and before the connection (assuming that you're schema looks something like this) so that mongoose is aware that your model exists (it _registers_ our model so that you can retrieve it later):

<pre><code data-trim contenteditable>mongoose.model('Movie', Movie);
</code></pre>

## (10 points) Part 3 - Displaying All Movies

### Overview

We'll be using mongoose to read in all of the movies from the database. Then, we'll be able to display the movies in a table. 

### Details

There's a bunch of setup that we need in order to integrate our databases access code with our express app:

* in <code>app.js</code>, require the <code>db.js</code> file that you created so that the code that you wrote for the Schema and for connecting to the databases is executed
* at the top of <code>app.js</code>, after you've created your application object: <code>require('./db');</code>
* after that, retrieve the model that you registered with mongoose:

<pre><code data-trim contenteditable>var mongoose = require('mongoose');
var Movie = mongoose.model('Movie');
</code></pre>

You can now use <code>Movie.find</code> to retrieve all of the movies in your database!

* create a route handler that accepts requests for <code>/movies</code>
* in that route handler, the callback should use <code>Movie.find</code> to retrieve all movies!
* <code>find</code> takes an __query object__ (just a regular object) that specifies the criteria for what we're searching for using name/value pairs... for example {year: 1978} would be all movies made in 1978
* if you leave the query object empty, it'll just give back all movies
* the second argument it find is yet another callback... this time, it's the function that's executed when mongoose finishes finding stuff for you
* find works like this:

<pre><code data-trim contenteditable>SomeModel.find({search: criteria}, function(err, varToStoreResult, count) {
	console.log(varToStoreResult); // <---- variable contains found documents!

});
</code></pre>
* so, once you've retrieved stuff from the database, you'll probably want to render your template... so in your callback, call <code>res.render</code>, rendering whatever template you'd like to display your table
* of course, you'll have to pass in your find results so that you can iterate over them in your template
* in your template, use standard <code>table</code> markup, with each row containing a movie
* try opening your page in your browser to show a table of all movies!


## (10 points) Part 4 - Filtering

### Overview

In this part of the assignment, you'll add a form to your page that allows you to filter the table by director name via GET and query string parameters.

### Details

You already know how to do most of this, but here's a rough sketch of some of the relevant tasks:

* create a form that uses GET, and goes to (submits or makes a request to) <code>/movies</code>
	* note that we don't need <code>body-parser</code> middleware since we're using GET
	* also... why are we using GET instead of POST? because we're merely reading data... (pretty common convention for search)
* modify your request handler to try to get the value of query string parameters (<code>req.query.nameOfFormElement</code>)
	* for example, submitting your form may result in adding a ?foo=bar to the url
	* to access that name/value pair in the query string on the server side, <code>req.query.foo</code>
* use the value passed in from the form (via GET and the query string) to filter the movies by director name

[Check out the example interaction at the end of this page](#examples4)


## (20 points) Part 5 - Adding a Movie

### Overview

In this part of the assignment, you'll create another page that contains a form to add new movies. The form will POST data... and then redirect back to <code>/movies</code>.

### Details

You already know how to do most of this, but here's a rough sketch of some of the relevant tasks:

* add a link on the bottom of your /movies page
* set up body-parser so that you'll have access to POST data
* create the appropriate route handlers that accepts requests for <code>/movies/add</code>
    * GET will handle showing the form
        * create another template file
        * add a form to your template
    * POST will handle the form submission
        * your request handler that deals with POSTs will create a new movie in the database... [check out the slides](../slides/11/mongo.html) 

[Check out the example interaction at the end of this page](#examples5)

<a name="examples"></a>

## Example Interaction

<a name="examples4"></a>
By the end of parts 1-4:

<div markdown="block" class="img">
![let's watch movies](../resources/img/movies.gif)
</div>

<a name="examples5"></a>
Part 5:

<div markdown="block" class="img">
![let's watch movies](../resources/img/movies-add.gif)
</div>

</div>

</div>
